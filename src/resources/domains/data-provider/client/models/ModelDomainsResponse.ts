/* tslint:disable */
/* eslint-disable */
/**
 * Dehydrated API
 * This API provides a REST interface to manage domains for https://github.com/dehydrated-io/dehydrated
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime.ts";
import type { ModelDomainEntry } from "./ModelDomainEntry.ts";
import {
  ModelDomainEntryFromJSON,
  ModelDomainEntryFromJSONTyped,
  ModelDomainEntryToJSON,
  ModelDomainEntryToJSONTyped,
} from "./ModelDomainEntry.ts";

/**
 *
 * @export
 * @interface ModelDomainsResponse
 */
export interface ModelDomainsResponse {
  /**
   * Data contains the list of domain entries if the operation was successful.
   * @type {Array<ModelDomainEntry>}
   * @memberof ModelDomainsResponse
   */
  data?: Array<ModelDomainEntry>;
  /**
   * Error contains an error message if the operation failed.
   * @type {string}
   * @memberof ModelDomainsResponse
   */
  error?: string;
  /**
   * Success indicates whether the operation was successful.
   * @type {boolean}
   * @memberof ModelDomainsResponse
   */
  success?: boolean;
}

/**
 * Check if a given object implements the ModelDomainsResponse interface.
 */
export function instanceOfModelDomainsResponse(
  value: object,
): value is ModelDomainsResponse {
  return true;
}

export function ModelDomainsResponseFromJSON(json: any): ModelDomainsResponse {
  return ModelDomainsResponseFromJSONTyped(json, false);
}

export function ModelDomainsResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ModelDomainsResponse {
  if (json == null) {
    return json;
  }
  return {
    data:
      json["data"] == null
        ? undefined
        : (json["data"] as Array<any>).map(ModelDomainEntryFromJSON),
    error: json["error"] == null ? undefined : json["error"],
    success: json["success"] == null ? undefined : json["success"],
  };
}

export function ModelDomainsResponseToJSON(json: any): ModelDomainsResponse {
  return ModelDomainsResponseToJSONTyped(json, false);
}

export function ModelDomainsResponseToJSONTyped(
  value?: ModelDomainsResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    data:
      value["data"] == null
        ? undefined
        : (value["data"] as Array<any>).map(ModelDomainEntryToJSON),
    error: value["error"],
    success: value["success"],
  };
}
