/* tslint:disable */
/* eslint-disable */
/**
 * Dehydrated API
 * This API provides a REST interface to manage domains for https://github.com/dehydrated-io/dehydrated
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface ModelDomainEntry
 */
export interface ModelDomainEntry {
  /**
   * Certificate alias for reference.
   * @type {string}
   * @memberof ModelDomainEntry
   */
  alias?: string;
  /**
   * Alternative domain names (e.g., "www.example.com").
   * @type {Array<string>}
   * @memberof ModelDomainEntry
   */
  alternativeNames?: Array<string>;
  /**
   * Domain comment for documentation.
   * @type {string}
   * @memberof ModelDomainEntry
   */
  comment?: string;
  /**
   * Primary domain name (e.g., "example.com").
   * @type {string}
   * @memberof ModelDomainEntry
   */
  domain?: string;
  /**
   * Whether the domain is enabled for certificate issuance.
   * @type {boolean}
   * @memberof ModelDomainEntry
   */
  enabled?: boolean;
  /**
   * Metadata contains additional information about the domain entry.
   * @type {{ [key: string]: object; }}
   * @memberof ModelDomainEntry
   */
  metadata?: { [key: string]: object };
}

/**
 * Check if a given object implements the ModelDomainEntry interface.
 */
export function instanceOfModelDomainEntry(
  value: object,
): value is ModelDomainEntry {
  return true;
}

export function ModelDomainEntryFromJSON(json: any): ModelDomainEntry {
  return ModelDomainEntryFromJSONTyped(json, false);
}

export function ModelDomainEntryFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ModelDomainEntry {
  if (json == null) {
    return json;
  }
  return {
    alias: json["alias"] == null ? undefined : json["alias"],
    alternativeNames:
      json["alternative_names"] == null ? undefined : json["alternative_names"],
    comment: json["comment"] == null ? undefined : json["comment"],
    domain: json["domain"] == null ? undefined : json["domain"],
    enabled: json["enabled"] == null ? undefined : json["enabled"],
    metadata: json["metadata"] == null ? undefined : json["metadata"],
  };
}

export function ModelDomainEntryToJSON(json: any): ModelDomainEntry {
  return ModelDomainEntryToJSONTyped(json, false);
}

export function ModelDomainEntryToJSONTyped(
  value?: ModelDomainEntry | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    alias: value["alias"],
    alternative_names: value["alternativeNames"],
    comment: value["comment"],
    domain: value["domain"],
    enabled: value["enabled"],
    metadata: value["metadata"],
  };
}
