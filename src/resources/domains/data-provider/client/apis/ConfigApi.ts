/* tslint:disable */
/* eslint-disable */
/**
 * Dehydrated API
 * Authentication is optional and depends on server configuration. When enabled, all API endpoints require a valid JWT token in the Authorization header. When disabled, no authentication is required.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelConfigResponse,
} from '../models/index';
import {
    ModelConfigResponseFromJSON,
    ModelConfigResponseToJSON,
} from '../models/index';

/**
 * 
 */
export class ConfigApi extends runtime.BaseAPI {

    /**
     * Retrieve the current dehydrated configuration settings including paths, certificates, and operational parameters
     * Get dehydrated configuration
     */
    async configGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ModelConfigResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ModelConfigResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve the current dehydrated configuration settings including paths, certificates, and operational parameters
     * Get dehydrated configuration
     */
    async configGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ModelConfigResponse> {
        const response = await this.configGetRaw(initOverrides);
        return await response.value();
    }

}
