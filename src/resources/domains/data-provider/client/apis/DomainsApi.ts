/* tslint:disable */
/* eslint-disable */
/**
 * Dehydrated API
 * Authentication is optional and depends on server configuration. When enabled, all API endpoints require a valid JWT token in the Authorization header. When disabled, no authentication is required.
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  ModelCreateDomainRequest,
  ModelDomainResponse,
  ModelDomainsResponse,
  ModelUpdateDomainRequest,
} from "../models/index";
import {
  ModelCreateDomainRequestFromJSON,
  ModelCreateDomainRequestToJSON,
  ModelDomainResponseFromJSON,
  ModelDomainResponseToJSON,
  ModelDomainsResponseFromJSON,
  ModelDomainsResponseToJSON,
  ModelUpdateDomainRequestFromJSON,
  ModelUpdateDomainRequestToJSON,
} from "../models/index";

export interface ApiV1DomainsDomainDeleteRequest {
  domain: string;
  alias?: string;
}

export interface ApiV1DomainsDomainGetRequest {
  domain: string;
  alias?: string;
}

export interface ApiV1DomainsDomainPutRequest {
  domain: string;
  request: ModelUpdateDomainRequest;
  alias?: string;
}

export interface ApiV1DomainsPostRequest {
  request: ModelCreateDomainRequest;
}

/**
 *
 */
export class DomainsApi extends runtime.BaseAPI {
  /**
   * Delete a domain entry
   * Delete a domain
   */
  async apiV1DomainsDomainDeleteRaw(
    requestParameters: ApiV1DomainsDomainDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["domain"] == null) {
      throw new runtime.RequiredError(
        "domain",
        'Required parameter "domain" was null or undefined when calling apiV1DomainsDomainDelete().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["alias"] != null) {
      queryParameters["alias"] = requestParameters["alias"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/domains/{domain}`.replace(
          `{${"domain"}}`,
          encodeURIComponent(String(requestParameters["domain"])),
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Delete a domain entry
   * Delete a domain
   */
  async apiV1DomainsDomainDelete(
    requestParameters: ApiV1DomainsDomainDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.apiV1DomainsDomainDeleteRaw(requestParameters, initOverrides);
  }

  /**
   * Get details of a specific domain
   * Get a domain
   */
  async apiV1DomainsDomainGetRaw(
    requestParameters: ApiV1DomainsDomainGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModelDomainResponse>> {
    if (requestParameters["domain"] == null) {
      throw new runtime.RequiredError(
        "domain",
        'Required parameter "domain" was null or undefined when calling apiV1DomainsDomainGet().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["alias"] != null) {
      queryParameters["alias"] = requestParameters["alias"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/domains/{domain}`.replace(
          `{${"domain"}}`,
          encodeURIComponent(String(requestParameters["domain"])),
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ModelDomainResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get details of a specific domain
   * Get a domain
   */
  async apiV1DomainsDomainGet(
    requestParameters: ApiV1DomainsDomainGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModelDomainResponse> {
    const response = await this.apiV1DomainsDomainGetRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Update an existing domain entry
   * Update a domain
   */
  async apiV1DomainsDomainPutRaw(
    requestParameters: ApiV1DomainsDomainPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModelDomainResponse>> {
    if (requestParameters["domain"] == null) {
      throw new runtime.RequiredError(
        "domain",
        'Required parameter "domain" was null or undefined when calling apiV1DomainsDomainPut().',
      );
    }

    if (requestParameters["request"] == null) {
      throw new runtime.RequiredError(
        "request",
        'Required parameter "request" was null or undefined when calling apiV1DomainsDomainPut().',
      );
    }

    const queryParameters: any = {};

    if (requestParameters["alias"] != null) {
      queryParameters["alias"] = requestParameters["alias"];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/domains/{domain}`.replace(
          `{${"domain"}}`,
          encodeURIComponent(String(requestParameters["domain"])),
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: ModelUpdateDomainRequestToJSON(requestParameters["request"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ModelDomainResponseFromJSON(jsonValue),
    );
  }

  /**
   * Update an existing domain entry
   * Update a domain
   */
  async apiV1DomainsDomainPut(
    requestParameters: ApiV1DomainsDomainPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModelDomainResponse> {
    const response = await this.apiV1DomainsDomainPutRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get a list of all configured domains
   * List all domains
   */
  async apiV1DomainsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModelDomainsResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/domains`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ModelDomainsResponseFromJSON(jsonValue),
    );
  }

  /**
   * Get a list of all configured domains
   * List all domains
   */
  async apiV1DomainsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModelDomainsResponse> {
    const response = await this.apiV1DomainsGetRaw(initOverrides);
    return await response.value();
  }

  /**
   * Create a new domain entry
   * Create a domain
   */
  async apiV1DomainsPostRaw(
    requestParameters: ApiV1DomainsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ModelDomainResponse>> {
    if (requestParameters["request"] == null) {
      throw new runtime.RequiredError(
        "request",
        'Required parameter "request" was null or undefined when calling apiV1DomainsPost().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        await this.configuration.apiKey("Authorization"); // BearerAuth authentication
    }

    const response = await this.request(
      {
        path: `/api/v1/domains`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: ModelCreateDomainRequestToJSON(requestParameters["request"]),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ModelDomainResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create a new domain entry
   * Create a domain
   */
  async apiV1DomainsPost(
    requestParameters: ApiV1DomainsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ModelDomainResponse> {
    const response = await this.apiV1DomainsPostRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
